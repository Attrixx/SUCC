using System;
using System.Collections.Generic;
using System.Linq;
using SUCC;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace SUCC.Tests
{
    [TestClass]
    public class ComplexTypeShortcutTests
    {
        [TestMethod]
        public void ComplexTypeTest()
        {
            var file = new DataFile("tests/" + nameof(ComplexTypeShortcutTests), defaultFileText: FileDefault, autoSave: false);
            var loaded = file.Get<ComplexType[]>(nameof(TestComplexTypes));

            CollectionAssert.AreEqual(TestComplexTypes, loaded);
        }

        class ComplexType
        {
            public int Integer;
            public string String;
            public bool Boolean;

            // for property shortcuts
            public static ComplexType Test => new ComplexType(4532432, "JKLjfkldsjfkdlsh", false);
            public static ComplexType Teeeest => new ComplexType(64732846, "khfui567", true);

            // for constructor shortcuts
            public ComplexType(int integer, string text, bool boolean)
            {
                Integer = integer;
                String = text;
                Boolean = boolean;
            }

            // for method shortcuts
            public static ComplexType GenerateComplexType(int integer, string text, bool boolean)
                => new ComplexType(integer, text, boolean);

            // for custom shortcuts
            public static ComplexType Shortcut(string shortcut)
            {
                if (shortcut == "shortcut1")
                    return new ComplexType(678, "you sly dog, you've got me monologuing!", true);

                if (shortcut == "shortcut2")
                    return new ComplexType(99, "One thing has not changed, old friend: you still speak in riddles", false);

                throw new Exception("invalid shortcut");
            }

            public override bool Equals(object obj)
            {
                var other = (ComplexType)obj;
                if (other == null) return false;

                return this.Integer == other.Integer 
                    && this.String == other.String 
                    && this.Boolean == other.Boolean;
            }
        }

        static readonly ComplexType[] TestComplexTypes = new ComplexType[]
        {
            ComplexType.Test, ComplexType.Teeeest,
            new ComplexType(7726371, "fdsafdsafjkfdts78a6f78", true),
            ComplexType.GenerateComplexType(123288, "y7u98yhuihjk", false),
            ComplexType.Shortcut("shortcut2"),
        };

        static readonly string FileDefault = @"
# Do not edit this file or the tests might fail.

TestComplexTypes:
    - Test
    - Teeeest
    - (7726371, ""fdsafdsafjkfdts78a6f78"", true)
    - GenerateComplexType(123288, ""y7u98yhuihjk"", false)
    - shortcut2
";
    }
}